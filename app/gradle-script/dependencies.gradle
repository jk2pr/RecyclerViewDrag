ext {

    //Version
    materialVersion = '1.0.0-rc01'
    recyclerViewVersion = '1.0.0'

    retrofitVersion = '2.3.0'
    rxAndroidVersion = '2.0.2'
    rxJavaVersion = '2.1.7'

    lifecycle_version = "2.0.0"

    glideVersion = '3.6.1'
    circleImageVersion = '1.3.0'

    junitVersion = '4.12'
    mockitoVersion = '2.8.47'

    constraintLayoutVersion = '1.1.2'

    //Packages
    supportMaterialPackage = 'com.google.android.material'
    supportRecyclePackage = 'androidx.recyclerview'
    supportCardViewPackage = 'androidx.cardview'
    supportAppCompatPackage = 'androidx.appcompat'


    retrofitPackage = 'com.squareup.retrofit2'

    reactivePackage = 'io.reactivex.rxjava2'

    glidePackage = 'com.github.bumptech.glide'
    hdodenhofPackage = 'de.hdodenhof'


    junitPackage = 'junit'
    mockitoPackage = 'org.mockito'

    constraintLayout = 'com.android.support.constraint'

    lifecycle = 'androidx.lifecycle'


    supportDependencies = [

            design      : buildDependency(supportMaterialPackage, 'material', materialVersion),
            recyclerView: buildDependency(supportRecyclePackage, 'recyclerview', recyclerViewVersion),
            cardView    : buildDependency(supportCardViewPackage, 'cardview', recyclerViewVersion),
            appCompat   : buildDependency(supportAppCompatPackage, 'appcompat', recyclerViewVersion)

    ]
    constraintLayoutDependencies = [
            constraint: buildDependency(constraintLayout, 'constraint-layout', constraintLayoutVersion)
    ]

    retrofitDependencies = [

            retrofit     : buildDependency(retrofitPackage, 'retrofit', retrofitVersion),
            gson         : buildDependency(retrofitPackage, 'converter-gson', retrofitVersion),
            rxAdapterJava: buildDependency(retrofitPackage, 'adapter-rxjava2', retrofitVersion)
    ]

    rxDependencies = [

            rxKotlin: buildDependency(reactivePackage, 'rxkotlin', rxAndroidVersion),
            // rxJava   : buildDependency(reactivePackage,'rxjava',rxJavaVersion)
    ]


    glide = buildDependency(glidePackage, 'glide', glideVersion)
    /*circleImageView = buildDependency(hdodenhofPackage, 'circleimageview', circleImageVersion)*/


    testingDependencies = [

            junit   : buildDependency(junitPackage, 'junit', junitVersion),
            mockito : buildDependency(mockitoPackage, 'mockito-core', mockitoVersion),
            liveData: buildDependency(mockitoPackage, 'mockito-core', mockitoVersion)

    ]




    lifecycle = [
            lifecycleExtension: buildDependency(lifecycle, 'lifecycle-extensions', lifecycle_version),
            lifecycleviewmodel: buildDependency(lifecycle, 'lifecycle-viewmodel', lifecycle_version),
            lifecyclelivedata : buildDependency(lifecycle, 'lifecycle-livedata', lifecycle_version),
            lifecycleruntime  : buildDependency(lifecycle, 'lifecycle-runtime', lifecycle_version)
    ]

    /* annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version" // use kapt for Kotlin
     // alternately - if using Java8, use the following instead of lifecycle-compiler
     implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

     // optional - ReactiveStreams support for LiveData
     implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version" // use -ktx for Kotlin

     // optional - Test helpers for LiveData
     testImplementation "androidx.arch.core:core-testing:$lifecycle_version"*/


}

static String buildDependency(String pack, String dependency, String version) {
    return "${pack}:${dependency}:${version}"
}